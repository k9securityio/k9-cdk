#!/usr/bin/env node
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const cdk = require("@aws-cdk/core");
const s3 = require("@aws-cdk/aws-s3");
const k9 = require("@k9securityio/k9-cdk");
const kms = require("@aws-cdk/aws-kms");
const administerResourceArns = [
    "arn:aws:iam::123456789012:user/ci",
    "arn:aws:iam::123456789012:user/person1",
];
const readConfigArns = administerResourceArns.concat([
    "arn:aws:iam::123456789012:role/k9-auditor"
]);
const writeDataArns = [
    "arn:aws:iam::123456789012:role/app-backend",
];
const readDataArns = writeDataArns.concat([
    "arn:aws:iam::123456789012:role/customer-service"
]);
const app = new cdk.App();
const stack = new cdk.Stack(app, 'K9Example');
const bucket = new s3.Bucket(stack, 'TestBucket', {});
const k9BucketPolicyProps = {
    bucket: bucket,
    k9DesiredAccess: new Array({
        accessCapabilities: k9.k9policy.AccessCapability.AdministerResource,
        allowPrincipalArns: administerResourceArns,
    }, {
        accessCapabilities: k9.k9policy.AccessCapability.ReadConfig,
        allowPrincipalArns: readConfigArns,
    }, {
        accessCapabilities: k9.k9policy.AccessCapability.WriteData,
        allowPrincipalArns: writeDataArns,
    }, {
        accessCapabilities: k9.k9policy.AccessCapability.ReadData,
        allowPrincipalArns: readDataArns,
    }
    // omit access spec for delete-data because it is unneeded
    )
};
k9.s3.grantAccessViaResourcePolicy(stack, "S3Bucket", k9BucketPolicyProps);
fs_1.writeFileSync('generated.bucket-policy.json', JSON.stringify((_a = bucket.policy) === null || _a === void 0 ? void 0 : _a.document.toJSON(), null, 2));
const keyPolicyProps = {
    k9DesiredAccess: new Array({
        accessCapabilities: [
            k9.k9policy.AccessCapability.AdministerResource,
            k9.k9policy.AccessCapability.ReadConfig
        ],
        allowPrincipalArns: administerResourceArns,
    }, {
        accessCapabilities: k9.k9policy.AccessCapability.WriteData,
        allowPrincipalArns: writeDataArns,
    }, {
        accessCapabilities: k9.k9policy.AccessCapability.ReadData,
        allowPrincipalArns: readDataArns,
    }
    // omit access spec for delete-data because it is unneeded
    )
};
const keyPolicy = k9.kms.makeKeyPolicy(keyPolicyProps);
fs_1.writeFileSync('generated.key-policy.json', JSON.stringify(keyPolicy.toJSON(), null, 2));
new kms.Key(stack, 'TestKey', { policy: keyPolicy });
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4YW1wbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLDJCQUFpQztBQUNqQyxxQ0FBcUM7QUFDckMsc0NBQXNDO0FBQ3RDLDJDQUEyQztBQUMzQyx3Q0FBd0M7QUFFeEMsTUFBTSxzQkFBc0IsR0FBRztJQUMzQixtQ0FBbUM7SUFDbkMsd0NBQXdDO0NBQzNDLENBQUM7QUFFRixNQUFNLGNBQWMsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLENBQUM7SUFDakQsMkNBQTJDO0NBQzlDLENBQUMsQ0FBQztBQUVILE1BQU0sYUFBYSxHQUFHO0lBQ2xCLDRDQUE0QztDQUMvQyxDQUFDO0FBQ0YsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztJQUN0QyxpREFBaUQ7Q0FDcEQsQ0FBQyxDQUFDO0FBRUgsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUM5QyxNQUFNLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUV0RCxNQUFNLG1CQUFtQixHQUE4QjtJQUNuRCxNQUFNLEVBQUUsTUFBTTtJQUNkLGVBQWUsRUFBRSxJQUFJLEtBQUssQ0FDdEI7UUFDSSxrQkFBa0IsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQjtRQUNuRSxrQkFBa0IsRUFBRSxzQkFBc0I7S0FDN0MsRUFDRDtRQUNJLGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsVUFBVTtRQUMzRCxrQkFBa0IsRUFBRSxjQUFjO0tBQ3JDLEVBQ0Q7UUFDSSxrQkFBa0IsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVM7UUFDMUQsa0JBQWtCLEVBQUUsYUFBYTtLQUNwQyxFQUNEO1FBQ0ksa0JBQWtCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRO1FBQ3pELGtCQUFrQixFQUFFLFlBQVk7S0FDbkM7SUFDRCwwREFBMEQ7S0FDN0Q7Q0FDSixDQUFDO0FBRUYsRUFBRSxDQUFDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDM0Usa0JBQWEsQ0FBQyw4QkFBOEIsRUFDeEMsSUFBSSxDQUFDLFNBQVMsT0FBQyxNQUFNLENBQUMsTUFBTSwwQ0FBRSxRQUFRLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRy9ELE1BQU0sY0FBYyxHQUE0QjtJQUM1QyxlQUFlLEVBQUUsSUFBSSxLQUFLLENBQ3RCO1FBQ0ksa0JBQWtCLEVBQUU7WUFDaEIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0I7WUFDL0MsRUFBRSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVO1NBQzFDO1FBQ0Qsa0JBQWtCLEVBQUUsc0JBQXNCO0tBQzdDLEVBQ0Q7UUFDSSxrQkFBa0IsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVM7UUFDMUQsa0JBQWtCLEVBQUUsYUFBYTtLQUNwQyxFQUNEO1FBQ0ksa0JBQWtCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRO1FBQ3pELGtCQUFrQixFQUFFLFlBQVk7S0FDbkM7SUFDRCwwREFBMEQ7S0FDN0Q7Q0FFSixDQUFDO0FBQ0YsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFdkQsa0JBQWEsQ0FBQywyQkFBMkIsRUFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFakQsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztBQUVuRCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQge3dyaXRlRmlsZVN5bmN9IGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0ICogYXMgczMgZnJvbSBcIkBhd3MtY2RrL2F3cy1zM1wiO1xuaW1wb3J0ICogYXMgazkgZnJvbSBcIkBrOXNlY3VyaXR5aW8vazktY2RrXCI7XG5pbXBvcnQgKiBhcyBrbXMgZnJvbSBcIkBhd3MtY2RrL2F3cy1rbXNcIjtcblxuY29uc3QgYWRtaW5pc3RlclJlc291cmNlQXJucyA9IFtcbiAgICBcImFybjphd3M6aWFtOjoxMjM0NTY3ODkwMTI6dXNlci9jaVwiLFxuICAgIFwiYXJuOmF3czppYW06OjEyMzQ1Njc4OTAxMjp1c2VyL3BlcnNvbjFcIixcbl07XG5cbmNvbnN0IHJlYWRDb25maWdBcm5zID0gYWRtaW5pc3RlclJlc291cmNlQXJucy5jb25jYXQoW1xuICAgIFwiYXJuOmF3czppYW06OjEyMzQ1Njc4OTAxMjpyb2xlL2s5LWF1ZGl0b3JcIlxuXSk7XG5cbmNvbnN0IHdyaXRlRGF0YUFybnMgPSBbXG4gICAgXCJhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDEyOnJvbGUvYXBwLWJhY2tlbmRcIixcbl07XG5jb25zdCByZWFkRGF0YUFybnMgPSB3cml0ZURhdGFBcm5zLmNvbmNhdChbXG4gICAgXCJhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDEyOnJvbGUvY3VzdG9tZXItc2VydmljZVwiXG5dKTtcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ0s5RXhhbXBsZScpO1xuY29uc3QgYnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ1Rlc3RCdWNrZXQnLCB7fSk7XG5cbmNvbnN0IGs5QnVja2V0UG9saWN5UHJvcHM6IGs5LnMzLks5QnVja2V0UG9saWN5UHJvcHMgPSB7XG4gICAgYnVja2V0OiBidWNrZXQsXG4gICAgazlEZXNpcmVkQWNjZXNzOiBuZXcgQXJyYXk8azkuazlwb2xpY3kuQWNjZXNzU3BlYz4oXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFjY2Vzc0NhcGFiaWxpdGllczogazkuazlwb2xpY3kuQWNjZXNzQ2FwYWJpbGl0eS5BZG1pbmlzdGVyUmVzb3VyY2UsXG4gICAgICAgICAgICBhbGxvd1ByaW5jaXBhbEFybnM6IGFkbWluaXN0ZXJSZXNvdXJjZUFybnMsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFjY2Vzc0NhcGFiaWxpdGllczogazkuazlwb2xpY3kuQWNjZXNzQ2FwYWJpbGl0eS5SZWFkQ29uZmlnLFxuICAgICAgICAgICAgYWxsb3dQcmluY2lwYWxBcm5zOiByZWFkQ29uZmlnQXJucyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYWNjZXNzQ2FwYWJpbGl0aWVzOiBrOS5rOXBvbGljeS5BY2Nlc3NDYXBhYmlsaXR5LldyaXRlRGF0YSxcbiAgICAgICAgICAgIGFsbG93UHJpbmNpcGFsQXJuczogd3JpdGVEYXRhQXJucyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgYWNjZXNzQ2FwYWJpbGl0aWVzOiBrOS5rOXBvbGljeS5BY2Nlc3NDYXBhYmlsaXR5LlJlYWREYXRhLFxuICAgICAgICAgICAgYWxsb3dQcmluY2lwYWxBcm5zOiByZWFkRGF0YUFybnMsXG4gICAgICAgIH1cbiAgICAgICAgLy8gb21pdCBhY2Nlc3Mgc3BlYyBmb3IgZGVsZXRlLWRhdGEgYmVjYXVzZSBpdCBpcyB1bm5lZWRlZFxuICAgIClcbn07XG5cbms5LnMzLmdyYW50QWNjZXNzVmlhUmVzb3VyY2VQb2xpY3koc3RhY2ssIFwiUzNCdWNrZXRcIiwgazlCdWNrZXRQb2xpY3lQcm9wcyk7XG53cml0ZUZpbGVTeW5jKCdnZW5lcmF0ZWQuYnVja2V0LXBvbGljeS5qc29uJyxcbiAgICBKU09OLnN0cmluZ2lmeShidWNrZXQucG9saWN5Py5kb2N1bWVudC50b0pTT04oKSwgbnVsbCwgMikpO1xuXG5cbmNvbnN0IGtleVBvbGljeVByb3BzOiBrOS5rbXMuSzlLZXlQb2xpY3lQcm9wcyA9IHtcbiAgICBrOURlc2lyZWRBY2Nlc3M6IG5ldyBBcnJheTxrOS5rOXBvbGljeS5BY2Nlc3NTcGVjPihcbiAgICAgICAge1xuICAgICAgICAgICAgYWNjZXNzQ2FwYWJpbGl0aWVzOiBbXG4gICAgICAgICAgICAgICAgazkuazlwb2xpY3kuQWNjZXNzQ2FwYWJpbGl0eS5BZG1pbmlzdGVyUmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgazkuazlwb2xpY3kuQWNjZXNzQ2FwYWJpbGl0eS5SZWFkQ29uZmlnXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgYWxsb3dQcmluY2lwYWxBcm5zOiBhZG1pbmlzdGVyUmVzb3VyY2VBcm5zLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhY2Nlc3NDYXBhYmlsaXRpZXM6IGs5Lms5cG9saWN5LkFjY2Vzc0NhcGFiaWxpdHkuV3JpdGVEYXRhLFxuICAgICAgICAgICAgYWxsb3dQcmluY2lwYWxBcm5zOiB3cml0ZURhdGFBcm5zLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBhY2Nlc3NDYXBhYmlsaXRpZXM6IGs5Lms5cG9saWN5LkFjY2Vzc0NhcGFiaWxpdHkuUmVhZERhdGEsXG4gICAgICAgICAgICBhbGxvd1ByaW5jaXBhbEFybnM6IHJlYWREYXRhQXJucyxcbiAgICAgICAgfVxuICAgICAgICAvLyBvbWl0IGFjY2VzcyBzcGVjIGZvciBkZWxldGUtZGF0YSBiZWNhdXNlIGl0IGlzIHVubmVlZGVkXG4gICAgKVxuXG59O1xuY29uc3Qga2V5UG9saWN5ID0gazkua21zLm1ha2VLZXlQb2xpY3koa2V5UG9saWN5UHJvcHMpO1xuXG53cml0ZUZpbGVTeW5jKCdnZW5lcmF0ZWQua2V5LXBvbGljeS5qc29uJyxcbiAgICBKU09OLnN0cmluZ2lmeShrZXlQb2xpY3kudG9KU09OKCksIG51bGwsIDIpKTtcblxubmV3IGttcy5LZXkoc3RhY2ssICdUZXN0S2V5Jywge3BvbGljeToga2V5UG9saWN5fSk7XG5cbmFwcC5zeW50aCgpO1xuIl19